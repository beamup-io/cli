#!/bin/bash

set -e

cli_args="${@}"
cwd=$(pwd)
cli_dir=$(dirname "$(readlink -f "$0")")

# Setup temp directories
tmp_dir=$(readlink -f "$cli_dir/../tmp")
cache_dir="$tmp_dir/cache"
releases_dir="$tmp_dir/releases"
mkdir -p $cache_dir $releases_dir

# Use the name of the current folder as release name
project_name=$(basename $cwd)

# TODO: Make Erlang version overridable
BEAMUP_ERLANG_VERSION="20.1.2"

raw_architecture=$(uname -m)
case $raw_architecture in
  arm32|armv7|armhfp)
    architecture=arm32v7
    ;;
  arm64|armv8|aarch64)
    architecture=arm64v8
    ;;
  *)
    architecture=amd64
    ;;
esac

image="$architecture/erlang:$BEAMUP_ERLANG_VERSION"

container () {
  echo "BeamUp booting container $image with command $1 for project $project_name"

  # Detect if running in a TTY
  interactive=""
  if [ -t 0 ]; then
    interactive="i"
  fi

  # Detect if Docker ships with its own init system
  init="--init"
  if docker run --init 2>&1 | grep -q 'unknown flag'; then
    init=""
  fi

  docker run --rm \
    ${init} \
    --name="beamup-${project_name}" \
    --net=host \
    --entrypoint="/host/builder/priv/entrypoint.sh" \
    -v "${cli_dir}/rebar.config:/host/builder/rebar.config:ro" \
    -v "${cli_dir}/src:/host/builder/src:ro" \
    -v "${cli_dir}/test:/host/builder/test:ro" \
    -v "${cli_dir}/priv:/host/builder/priv:ro" \
    -v "${cli_dir}/commands:/host/builder/commands:ro" \
    -v "${cwd}:/host/project/${project_name}:ro" \
    -v "${cache_dir}/builder:/beamup/builder/_build" \
    -v "${cache_dir}/rebar3:/root/.cache/rebar3" \
    -v "${cache_dir}/shell:/root/.cache/erlang-history/" \
    -v "${releases_dir}:/host/releases" \
    -e "TERM=dumb" \
    -e "BEAMUP_PROJECT_NAME=${project_name}" \
    -e "BEAMUP_ERLANG_VERSION=${BEAMUP_ERLANG_VERSION}" \
    -${interactive}t $image \
    "$1"
}

attach () {
  container="beamup-${project_name}"
  echo "BeamUp attaching to container $container"

  set +e
  docker exec -it "$container" bash
  ret=$?
  set -e

  if [ $ret -ne 0 ]; then
    echo "Are you inside the root directory of your project?"
  fi

  exit $ret
}

kill_container () {
  container="beamup-${project_name}"
  echo "BeamUp killing container $container"
  docker kill "$container"
}

version () {
  pushd $cli_dir > /dev/null
  cli_version=$(git rev-list -1 HEAD)
  popd > /dev/null

  image_version=$(docker image ls --format='{{.ID}}' $image)

  echo "BeamUp CLI tool version $cli_version"
  echo "Container image $image version $image_version"
}

update () {
  echo "Checking for updates..."

  pushd "$cli_dir"
  git pull
  popd

  echo "Done."
}

cli_command=$1
if [ -z "$cli_command" ]; then
  echo "usage: beamup build|attach|update|selftest|<script> [--version]"
  exit 1
else
  shift
fi

case $cli_command in
  --version)
    version
    ;;
  update)
    update
    ;;
  attach)
    attach
    ;;
  kill)
    kill_container
    ;;
  *)
    container "$cli_args"
    ;;
esac

echo "" # Clean prompt
