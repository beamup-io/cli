#!/bin/bash

set -e

cli_args="${@}"
cwd=$(pwd)
cli_dir=$(dirname "$(readlink -f "$0")")

source $cli_dir/priv/is_container.sh

# Setup temp directories
tmp_dir=$(readlink -f "$cli_dir/../tmp")
cache_dir="$tmp_dir/cache"
mkdir -p $cache_dir

# Use the name of the current folder as release name
project_name=$(basename $cwd)

# TODO: Make Erlang version overridable
BEAMUP_ERLANG_VERSION="20.1.2"

main () {
  cli_command=$1
  if [ -z "$cli_command" ]; then
    echo "usage: beamup build|new|attach|update|selftest|<script> [project_name] [--version]"
    exit 1
  else
    shift
  fi

  case $cli_command in
    new)
      new $cli_args
      ;;
    --version)
      version
      ;;
    update)
      update
      ;;
    attach)
      attach
      ;;
    kill)
      kill_container
      ;;
    *)
      run "$cli_args"
      ;;
  esac
}

run () {
  if is_container; then
    BEAMUP_PROJECT_DIR="$cwd" $cli_dir/priv/entrypoint.sh "$1"
  else
    container "$1"
  fi
}

raw_architecture=$(uname -m)
case $raw_architecture in
  arm32|armv7|armv7l|armhfp)
    architecture=arm32v7
    ;;
  arm64|armv8|aarch64)
    architecture=arm64v8
    ;;
  *)
    architecture=amd64
    ;;
esac

image="$architecture/erlang:$BEAMUP_ERLANG_VERSION"

# Detect if `docker run` supports a given flag ($1)
# for graceful fallback when docker client is older
is_docker_run_flag_supported() {
  ! docker run "$1" 2>&1 | grep -q 'unknown flag'
}

container () {
  echo "BeamUp booting container $image with command $1 for project $project_name"

  # Detect if running in a TTY
  interactive=""
  if [ -t 0 ]; then
    interactive="i"
  fi

  # Running with an init system allows killing the container with CTRL+C
  init=""
  if is_docker_run_flag_supported "--init"; then init="--init"; fi

  # Try to mount /tmp inside the container as ramdisk to avoid SSD thrashing
  tmp_volume=""
  if is_docker_run_flag_supported "--mount"; then
    tmp_volume="--mount type=tmpfs,destination=/tmp,tmpfs-mode=0755";
  fi

  # Bind-mount /tmp to ${cache_dir}/container/tmp in debug mode
  if [ -n "$DEBUG" ] || [ -n "$BEAMUP_BIND_MOUNT_TMP" ]; then
    tmp_volume="-v ${cache_dir}/container/tmp:/tmp"
    rm -rf ${cache_dir}/container/tmp || true
  fi

  # If $BEAMUP_STORE is an absolute path
  # then mount that same path as volume
  store_volume=""
  if [[ $BEAMUP_STORE = '/'* ]]; then
    echo "Using local file system as Release Store: $BEAMUP_STORE"
    store_volume="-v ${BEAMUP_STORE}:${BEAMUP_STORE}"
  fi

  # Read host's global gitignore file for passing
  # into container as environment variable
  global_gitignore=$(cat $(git config --global core.excludesfile))

  docker run --rm \
    ${init} \
    --name="beamup-${project_name}" \
    --net=host \
    --entrypoint="/root/.beamup/cli/priv/entrypoint.sh" \
    ${tmp_volume} \
    ${store_volume} \
    -v "${cwd}:/root/.beamup/host/project/${project_name}:ro" \
    -v "${cli_dir}:/root/.beamup/cli" \
    -v "${cache_dir}/builder:/tmp/beamup/cli/_build" \
    -v "${cache_dir}/elixir:/root/.beamup/elixir" \
    -v "${cache_dir}/mix:/root/.mix" \
    -v "${cache_dir}/rebar3:/root/.cache/rebar3" \
    -v "${cache_dir}/shell:/root/.cache/erlang-history/" \
    -e "TERM=dumb" \
    -e "DEBUG=${DEBUG}" \
    -e "BEAMUP_PROJECT_DIR=/root/.beamup/host/project/${project_name}" \
    -e "BEAMUP_PROJECT_NAME=${project_name}" \
    -e "BEAMUP_STORE=${BEAMUP_STORE}" \
    -e "BEAMUP_STORE_SECRET=${BEAMUP_STORE_SECRET}" \
    -e "BEAMUP_ERLANG_VERSION=${BEAMUP_ERLANG_VERSION}" \
    -e "BEAMUP_ELIXIR_VERSION=${BEAMUP_ELIXIR_VERSION}" \
    -e "GLOBAL_GITIGNORE=${global_gitignore}" \
    -${interactive}t $image \
    "$1"
}

new () {
  shift
  $cli_dir/templates/new "$1"
}

attach () {
  container="beamup-${project_name}"
  echo "BeamUp attaching to container $container"

  set +e
  docker exec -it "$container" bash
  ret=$?
  set -e

  if [ $ret -ne 0 ]; then
    echo "Are you inside the root directory of your project?"
  fi

  exit $ret
}

kill_container () {
  container="beamup-${project_name}"
  echo "BeamUp killing container $container"
  docker kill "$container"
}

version () {
  pushd $cli_dir > /dev/null
  cli_version=$(git rev-list -1 HEAD)
  popd > /dev/null

  image_version=$(docker image ls --format='{{.ID}}' $image)

  echo "BeamUp CLI tool version $cli_version"
  echo "Container image $image version $image_version"
}

update () {
  echo "Checking for updates..."

  pushd "$cli_dir"
  git pull
  popd

  echo "Done."
}

main "$1"
echo "" # Clean prompt
